; Explain Script for Potentiostatic EIS Experiment
; Copyright (c) Gamry Instruments, Inc.

include "explain.exp"
include "classReadZ.exp"

global EnableModPhzCurves=TRUE

global ExptTag="EISPOT"

function Main ()
	
	Passes = 10

	PstatSelect = PSTATSELECT.New ("PSTAT", "&Pstat")
	
	Title = LABEL.New ("TITLE",30,"Potentiostatic EIS","Test &Identifier")
	Output = OUTPUT.New ("OUTPUT",Sprint(ExptTag,".DTA"), "Output &File")
	Notes = NOTES.New ("NOTES",400,NIL,"&Notes...")

	DCAmpl	= POTEN.New ("VDC", 0.000,TRUE,"DC &Voltage (V)")
	FreqInit  = QUANT.New ("FREQINIT",100000.0,"Initial Fre&q. (Hz)")
	FreqFinal = QUANT.New ("FREQFINAL",0.2,"Final Fre&q. (Hz)")	
	PointDensity = QUANT.New ("PTSPERDEC",10.0,"Points/&decade")
	ACAmpl = QUANT.New ("VAC",10.0,"AC &Voltage (mV rms)")

	Area	= QUANT.New ("AREA", 1.0, "&Area (cm^2)")

	Condit  = TWOPARAM.New ("CONDIT", FALSE, 15.0, 0.0,"Conditionin&g","Time(s)","E(V)")
	Delay = TWOPARAM.New ("DELAY",TRUE,100.0,0.0,"Init. De&lay","Time(s)","Stab.(mV/s)")	

	ZGuess = QUANT.New ("ZGUESS", 100.0, "E&stimated Z (ohms)")
	

	
	SelectVector = VectorNew(3)										
	SelectVector[READZ_SPEED_FAST] = "Fast"										
	SelectVector[READZ_SPEED_NORM] = "Normal"									
	SelectVector[READZ_SPEED_LOW]  = "Low Noise"									
	Speed = SELECTOR.New("SPEED", SelectVector, 1, "&Optimize for:")
	
	SelectVector = VectorNew(2)										
	SelectVector[0] = "Off"										
	SelectVector[1] = "On"													
	THD = SELECTOR.New("THD", SelectVector, 0, "T&HD")
	
	SelectVector = VectorNew(2)										
	SelectVector[0] = "Off"										
	SelectVector[1] = "On"
	DriftCor = SELECTOR.New("DRIFTCOR", SelectVector, 0, "&Drift Correction")
	
	result = SetupRestore ("EIS300.SET", ExptTag
&			,PstatSelect.Selector(SELECTOR_ASTERISK)
&			,Title
&			,Output
&			,Notes
&			,FreqInit
&			,FreqFinal
&			,PointDensity
&			,ACAmpl
&			,DCAmpl
&			,Area
&			,Condit
&			,Delay
&			,ZGuess
&			,Speed
&			,THD
&			,DriftCor
&			)

	POTEN.SetEoc (0.0)
	loop	
		result = Setup ("Potentiostatic EIS"
&			,PstatSelect.Selector(SELECTOR_ASTERISK)
&			,Title
&			,Output
&			,Notes
&			,FreqInit
&			,FreqFinal
&			,PointDensity
&			,ACAmpl
&			,DCAmpl
&			,Area
&			,Condit
&			,Delay
&			,ZGuess
&			,Speed
&			,THD
&			,DriftCor
&			)

		if (result eq FALSE)
			return
		
		;Check for reasonable ZGuess to Avoid Divide by 0 error Bug #3599
		if( ZGuess.Value() le 0.0 )
			Warning("Enter positive non-zero value for Estimated Z")
			continue
			
		Pstat = PstatSelect.CreatePstat ("PSTAT", "PstatClass")			
			
		PDV = PointDensity.Value ()
		FF = Abs (FreqFinal.Value ())
		IF = Abs (FreqInit.Value ())

		if (Pstat.CheckAuth("EIS300", CHECKAUTHSEVERITY_WARNING) ne TRUE)
			continue
		if (Pstat.CheckAuthCtrlMode(PstatMode, CHECKAUTHSEVERITY_WARNING) ne TRUE)
			continue
		if (Pstat.CheckAuthFreq(IF, CHECKAUTHSEVERITY_WARNING) ne TRUE)
			continue
		if (Pstat.CheckAuthFreq(FF, CHECKAUTHSEVERITY_WARNING) ne TRUE)
			continue

		FLimUpper = Pstat.FreqLimitUpper ()
		FLimLower = Pstat.FreqLimitLower ()

		if (IF gt FLimUpper)
			Warning (Sprint ("Initial frequency exceeds upper limit - ", FLimUpper))
			IF = FLimUpper

		if (FF gt FLimUpper)
			Warning (Sprint ("Final frequency exceeds upper limit - ", FLimUpper))
			FF = FLimUpper

		if (IF lt FLimLower)
			Warning (Sprint ("Initial frequency exceeds lower limit - ", FLimLower))
			IF = FLimLower

		if (FF lt FLimLower)
			Warning (Sprint ("Final frequency exceeds lower limit - ", FLimLower))
			FF = FLimLower

		MaxPoints = CheckEISPoints (IF, FF, PDV)
		if (TestMaxPoints (MaxPoints, TRUE))
			continue

		; Acquire output file
		if (Output.Open () ne TRUE)
			continue

		if (CheckInstrument (Pstat, CALCHECK_ACDC) ne TRUE)
			continue

		; Acquire use of the requested Potentiostat
		if (Pstat.Open () ne TRUE)
			continue
			
		ReadZ = READZ.New (Pstat)		
		if (ReadZ.PotTestGuess(IF, ACAmpl.Value()*0.001, DCAmpl.Value(), ZGuess.Value()) eq FALSE)
			Pstat.Close ()
			ReadZ = NIL
			continue	

		break

	result = SetupSave ("EIS300.SET", ExptTag
&			,PstatSelect.Selector(SELECTOR_ASTERISK)
&			,Title
&			,Output
&			,Notes
&			,FreqInit
&			,FreqFinal
&			,PointDensity
&			,ACAmpl
&			,DCAmpl
&			,Area
&			,Condit
&			,Delay
&			,ZGuess
&			,Speed
&			,THD
&			,DriftCor
&			)

	if (Speed.Value() eq 0)							
		ReadZ.SetSpeed(READZ_SPEED_FAST)
	else if (Speed.Value() eq 1)
		ReadZ.SetSpeed(READZ_SPEED_NORM)
	else if (Speed.Value() eq 2)
		ReadZ.SetSpeed(READZ_SPEED_LOW)

	if (DriftCor.Value() eq 0)							
		ReadZ.SetDriftCor(FALSE)
	else if (DriftCor.Value() eq 1)
		ReadZ.SetDriftCor(TRUE)
		
	if(THD.Value() eq 0)
		ShowTHD = FALSE
		ShowHarmonics = FALSE
	else
		ShowTHD = TRUE
		ShowHarmonics = TRUE
		
	
	; Write the settings for the experiment to the STDOUT window for later review 		
	Stdout ("Experimental Parameters")
	Stdout ("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")
	Stdout ("Potentiostat: ", Config (GAMRYINI, Pstat.Section (), "Label"))
	Stdout ("Start Time:   ", TimeStamp ())
	Stdout ("")
	Stdout ("Initial Frequency:   ", FreqInit.Value (), " Hz")
	Stdout ("Final Frequency:   ", FreqFinal.Value (), " Hz")
	Stdout ("Points/decade:   ", PointDensity.Value (), " ")
	Stdout ("DC Voltage:   ", DCAmpl.Show ())
	Stdout ("AC Voltage:   ", ACAmpl.Value (), " mV")
	Stdout ("")
	Stdout ("Specimen Area:   ", Area.Value (), " cm^2")
	Stdout ("Estimated Z:   ", ZGuess.Value (), " ohms")
	Stdout ("ReadZ Speed:   ",ReadZ.Speed())				
	Stdout ("Drift Correction:   ",ReadZ.DriftCor())				
	Stdout ("")
	if (Condit.Check ())
		Stdout ("Conditioning Time:   ", Condit.V1 (), " s @", Condit.V2 (), " V")
	if (Delay.Check ())
		Stdout ("Delay Time:   ", Delay.V1 (), " s")

	Notify2(Pstat.Label())	
	ZCurve = CGEN.New ("ZCURVE", VIEW_DOUBLE)
	ZCurve.SetAxis (X_AXIS, 0, LOG_AXIS, NIL, "Frequency", "Hz")
	ZCurve.SetAxis (Y_AXIS, 1, LOG_AXIS, NIL, "M", "ohm")
	ZCurve.SetAxis (Z_AXIS, 2, LIN_AXIS, 2.0, "P", "�")
	ZCurve.SetTitle("Bode Plot")
	
	if (ReadZ.DriftCor () eq TRUE)
		ZCurveDrift = CGEN.New ("ZCURVE DRIFT CORRECTED", VIEW_DOUBLE)
		ZCurveDrift.SetAxis (X_AXIS, 0, LOG_AXIS, NIL, "Frequency", "Hz")
		ZCurveDrift.SetAxis (Y_AXIS, 1, LOG_AXIS, NIL, "M", "ohm")
		ZCurveDrift.SetAxis (Z_AXIS, 2, LIN_AXIS, 2.0, "P", "�")
		ZCurveDrift.SetTitle("Bode Plot Drift Corrected")
	
	if (ShowTHD)
		THDCurve = CGEN.New("THDCURVE", VIEW_DOUBLE)
		THDCurve.SetAxis (X_AXIS, 0,LOG_AXIS, NIL, "Frequency", "Hz")
		THDCurve.SetAxis (Y_AXIS, 2, LIN_AXIS, NIL, "I THD", "")
		THDCurve.SetAxis (Z_AXIS, 1, LIN_AXIS, NIL, "E THD", "")
		THDCurve.SetTitle(Sprint("THD vs Frequency")) 

	if (EnableModPhzCurves)
		ModulusCurve = CGEN.New ("MODULUSCURVE", VIEW_SINGLE)
		ModulusCurve.SetAxis (X_AXIS, 0, LOG_AXIS, NIL, "Frequency", "Hz")
		ModulusCurve.SetAxis (Y_AXIS, 1, LOG_AXIS, NIL, "M", "ohm")
		ModulusCurve.SetTitle("Modulus")

		PhaseCurve = CGEN.New ("PHASECURVE", VIEW_SINGLE)
		PhaseCurve.SetAxis (X_AXIS, 0, LOG_AXIS, NIL, "Frequency", "Hz")
		PhaseCurve.SetAxis (Y_AXIS, 2, LIN_AXIS, 2.0, "P", "�")
		PhaseCurve.SetTitle("Phase")

	NyquistCurve = CGEN.New ("NYQUISTCURVE", VIEW_SINGLE)
	NyquistCurve.SetAxis (X_AXIS, 0, LIN_AXIS, NIL, "ZReal", "ohm")
	NyquistCurve.SetAxis (Y_AXIS, 1, LIN_AXIS, NIL, "ZImag", "ohm")
	NyquistCurve.SetTitle("Nyquist Plot")
	
	Headline (Sprint(Title.Value ()," at Vdc=",DCAmpl.VsEref(),"V, Vac=", ACAmpl.Value(),"mVrms"))

	; Write Header info, setup data, etc. to output file. 
	Printl ("EXPLAIN")
	Printl ("TAG\t", ExptTag)
	Title.Printl ()
	Printl ("DATE\tLABEL\t", DateStamp (), "\tDate")
	Printl ("TIME\tLABEL\t", TimeStamp (), "\tTime")

	Notes.Printl ()
	Pstat.Printl ()
	DCAmpl.Printl ()
	FreqInit.Printl ()
	FreqFinal.Printl ()
	PointDensity.Printl ()
	ACAmpl.Printl ()
	Area.Printl ()
	
	Condit.Printl ()
	Delay.Printl ()

	Speed.Printl ()
	THD.Printl()
	DriftCor.Printl ()

	ZGuess.Printl ()

	Output.SetCommit (TRUE)

	if (Condit.Check ())
		Notify ("Conditioning")
		if (Condition (Pstat, Condit.V1 (), Condit.V2 (), FALSE, 0.1*Area.Value ()) eq FALSE)
			return

	POTEN.SetEoc (0.0)
 	; Measure Eoc
	if (Delay.Check ())
		OCDelay (Pstat, Delay.V1 (), Delay.V2 () * 0.001)
	else
		OCDelay (Pstat, 10.0,0.0001)
	Printl ("EOC\tQUANT\t", POTEN.Eoc (), "\tOpen Circuit (V)")

; -------------------------------------------------------------------------------------------------------------------------------------
; stuff we care about

	InitializePstat (Pstat, DCAmpl.VsEref ())
	IERange = Pstat.TestIERange (DCAmpl.VsEref() / ZGuess.Value())
	Pstat.SetIERange (IERange)

	Pstat.PrintHardwareSettings ()

	StartTime = Time ()

	Pstat.SetCell (CellOn)           ; turn on the cell

	; Setup initial guesses for VGS algorithm
	ReadZ.SetGain (1.0)
	ReadZ.SetINoise (0.0)
	ReadZ.SetVNoise (0.0)
	ReadZ.SetIENoise (0.0)
	ReadZ.SetZmod (ZGuess.Value ())
		
	ReadZ.SetShowTHD(ShowTHD)

	ReadZ.SetIdc (Pstat.MeasureI ())
	
	if (ShowTHD)
		if (ReadZ.DriftCor () eq FALSE)
			Printl(ZCurve.Tag (), "\tTABLE")		
			Printl("\tPt\tTime\tFreq\tZreal\tZimag\tZsig\tZmod\tZphz\tIdc\tVdc\tIERange\tIthd\tVthd",ReadZ.HarmonicsCTags())
			Printl("\t#\ts\tHz\tohm\tohm\tV\tohm\t�\tA\tV\t#\t#\t#",ReadZ.HarmonicsUnits())
		else
			Printl(ZCurve.Tag (), "\tTABLE")
			Printl ("\tPt\tTime\tFreq\tZreal\tZimag\tZsig\tZmod\tZphz\tZrealDrCor\tZimagDrCor\tZmodDrCor\tZphzDrCor\tIdc\tVdc\tIERange\tIthd\tVthd",ReadZ.HarmonicsCTags())
			Printl ("\t#\ts\tHz\tohm\tohm\tV\tohm\t�\tohm\tohm\tohm\t�\tA\tV\t#\t#\t#",ReadZ.HarmonicsUnits())
	else
		if (ReadZ.DriftCor () eq FALSE)
			Printl(ZCurve.Tag (), "\tTABLE")		
			Printl("\tPt\tTime\tFreq\tZreal\tZimag\tZsig\tZmod\tZphz\tIdc\tVdc\tIERange")
			Printl("\t#\ts\tHz\tohm\tohm\tV\tohm\t�\tA\tV\t#")
		else
			Printl(ZCurve.Tag (), "\tTABLE")	
			Printl ("\tPt\tTime\tFreq\tZreal\tZimag\tZsig\tZmod\tZphz\tZrealDrCor\tZimagDrCor\tZmodDrCor\tZphzDrCor\tIdc\tVdc\tIERange")
			Printl ("\t#\ts\tHz\tohm\tohm\tV\tohm\t�\tohm\tohm\tohm\t�\tA\tV\t#")

; ----------------------------------------------------------------------------------------------------------------
; I believe this is where they start collecting data

	LogIncrement = 1.0/PDV
	if (IF gt FF) 
		LogIncrement = -LogIncrement

	; Do initial 1st point check
	ReadZ.Measure (IF,ACAmpl.Value ()*0.001,DCAmpl.VsEref ())

	Point = 0
	while (Point lt MaxPoints)		
		; calculate the current frequency
		Freq = Pow (10.0, Log10 (IF) + Point * LogIncrement)	

		; limit this frequency to Pstat's allowed range		
		if (Freq lt FLimLower)
			Freq = FLimLower
		if (Freq gt FLimUpper)
			Freq = FLimUpper

		Headline(Sprint(Title.Value()," at Freq=",Freq,"Hz, Vdc=",DCAmpl.VsEref(),"V, Vac=", ACAmpl.Value(),"mVrms"))
		
		TElapsed = Real (Time () - StartTime)
		Status = ReadZ.Measure (Freq,ACAmpl.Value()*0.001,DCAmpl.VsEref())
		if (Status eq FALSE)
			Status = Query ("Bad Value", 
& 				  	"&Terminate Test", 
& 					"&Redo Point",
& 					"&Continue at Next Point")
			if ( Status eq 0)
				Abort()
			else if (Status eq 1)
				continue
			else
				Point = Point + 1
				continue	
		else
			if(ShowTHD)
				THDCurve.AddPoint(ReadZ.Zfreq(), ReadZ.Vthd(), ReadZ.Ithd(),0.0)
			if(ReadZ.DriftCor () eq TRUE)
				ZCurveDrift.Activate()
				ZCurveDrift.AddPoint (ReadZ.Zfreq(), ReadZ.ZmodDrift(), ReadZ.ZphzDrift(), 0.0)
			else
				ZCurve.Activate()
			ZCurve.AddPoint (ReadZ.Zfreq(), ReadZ.Zmod(), ReadZ.Zphz(), 0.0)
			
			NyquistCurve.AddPoint (ReadZ.Zreal(), -1.0 * ReadZ.Zimag(), ReadZ.Zphz(), 0.0)
			if (EnableModPhzCurves)
				ModulusCurve.AddPoint (ReadZ.Zfreq(), ReadZ.Zmod(), ReadZ.Zphz() , 0.0)
				PhaseCurve.AddPoint (ReadZ.Zfreq(), ReadZ.Zmod(), ReadZ.Zphz(), 0.0)
			
			if (ReadZ.Speed() ne READZ_SPEED_FAST)
				Sleep (1 + Time ())
			
			if(ShowTHD)
				if (ReadZ.DriftCor () eq FALSE)
					Printl(	"\t",Point
&						,"\t",TElapsed
&						,"\t",ReadZ.Zfreq()
&						,"\t",ReadZ.Zreal()
&						,"\t",ReadZ.Zimag()
&						,"\t",ReadZ.Zsig()
&						,"\t",ReadZ.Zmod()
&						,"\t",ReadZ.Zphz()
&						,"\t",ReadZ.Idc()
&						,"\t",ReadZ.Vdc()
&						,"\t",ReadZ.IERange()
&						,"\t",ReadZ.Ithd()
&						,"\t",ReadZ.Vthd()
&						,ReadZ.HarmonicsData(ReadZ.IHr(), ReadZ.IHi(),ReadZ.VHr(),ReadZ.VHi())
&						)
				else
					Printl(	"\t",Point
&						,"\t",TElapsed
&						,"\t",ReadZ.Zfreq()
&						,"\t",ReadZ.Zreal()
&						,"\t",ReadZ.Zimag()
&						,"\t",ReadZ.Zsig()
&						,"\t",ReadZ.Zmod()
&						,"\t",ReadZ.Zphz()
&						,"\t",ReadZ.ZrealDrift()
&						,"\t",ReadZ.ZimagDrift()
&						,"\t",ReadZ.ZmodDrift()
&						,"\t",ReadZ.ZphzDrift()
&						,"\t",ReadZ.Idc()
&						,"\t",ReadZ.Vdc()
&						,"\t",ReadZ.IERange()
&						,"\t",ReadZ.Ithd()
&						,"\t",ReadZ.Vthd()
&						,ReadZ.HarmonicsData(ReadZ.IHr(), ReadZ.IHi(),ReadZ.VHr(),ReadZ.VHi())
&						)
			else
				if (ReadZ.DriftCor () eq FALSE)
					Printl(	"\t",Point
&						,"\t",TElapsed
&						,"\t",ReadZ.Zfreq()
&						,"\t",ReadZ.Zreal()
&						,"\t",ReadZ.Zimag()
&						,"\t",ReadZ.Zsig()
&						,"\t",ReadZ.Zmod()
&						,"\t",ReadZ.Zphz()
&						,"\t",ReadZ.Idc()
&						,"\t",ReadZ.Vdc()
&						,"\t",ReadZ.IERange()
&						)
				else
					Printl(	"\t",Point
&						,"\t",TElapsed
&						,"\t",ReadZ.Zfreq()
&						,"\t",ReadZ.Zreal()
&						,"\t",ReadZ.Zimag()
&						,"\t",ReadZ.Zsig()
&						,"\t",ReadZ.Zmod()
&						,"\t",ReadZ.Zphz()
&						,"\t",ReadZ.ZrealDrift()
&						,"\t",ReadZ.ZimagDrift()
&						,"\t",ReadZ.ZmodDrift()
&						,"\t",ReadZ.ZphzDrift()
&						,"\t",ReadZ.Idc()
&						,"\t",ReadZ.Vdc()
&						,"\t",ReadZ.IERange()
&						)
		Point = Point + 1

	Pstat.SetCell (CellOff)             ; turn off the cell
	Pstat.Close ()
	Notify ("Experiment done, press \"F2-Skip\" to continue")
	Dawdle ()
	return


function SkipTest (Reason)
	Query (Reason, "Re&measure", "&Accept", "&Reject")
	return


function InitializePstat (Pstat, DCVoltage)
	Pstat.SetCell (CellOff)
	Pstat.InstrumentSpecificInitialize ()
	Pstat.SetAchSelect (AchSelect_GND)
	Pstat.SetCtrlMode (PstatMode)
	Pstat.SetStability (StabilityFast)
	Pstat.SetCASpeed (CASpeedMedFast)
	Pstat.SetSenseSpeedMode (TRUE)
	Pstat.SetConvention (Anodic)
	Pstat.SetGround (Float)
	Pstat.SetIchRange (3.0)
	Pstat.SetIchRangeMode (FALSE)
	Pstat.SetIchFilter(2.5)
	Pstat.SetVchRange (3.0)
	Pstat.SetVchRangeMode (FALSE)
	
	Pstat.SetIchOffsetEnable (TRUE)  ; 2.94
	Pstat.SetVchOffsetEnable (TRUE)  ; 2.94

	Pstat.SetVchFilter(2.5)
	Pstat.SetAchRange (3.0)
	Pstat.SetIERangeLowerLimit (NIL)
	Pstat.SetIERange (0.03)
	Pstat.SetIERangeMode (FALSE)
	Pstat.SetAnalogOut (0.0)
	Pstat.SetVoltage (DCVoltage)
	Pstat.SetPosFeedEnable (FALSE)
	Pstat.SetIruptMode (IruptOff)

	return
